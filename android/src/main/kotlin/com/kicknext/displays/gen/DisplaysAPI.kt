// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.kicknext.displays.gen

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class PluginDisplay (
  /**
   * Gets the display id.
   * <p>
   * Each logical display has a unique id.
   * The default display has id [DEFAULT_DISPLAY]
   * </p>
   */
  val displayId: Long,
  /**
   * Returns a combination of flags that describe the capabilities of the display.
   * @return The display flags.
   *
   * See [FLAG_SUPPORTS_PROTECTED_BUFFERS], [FLAG_SECURE], [FLAG_PRIVATE]
   */
  val flag: Long? = null,
  /**
   * Returns the rotation of the screen from its "natural" orientation.
   * The returned value may be [ROTATION_0]
   * (no rotation), [ROTATION_90], [ROTATION_180], or [ROTATION_270].  For
   * example, if a device has a naturally tall screen, and the user has
   * turned it on its side to go into a landscape orientation, the value
   * returned here may be either [ROTATION_90] or [ROTATION_270] depending on
   * the direction it was turned.  The angle is the rotation of the drawn
   * graphics on the screen, which is the opposite direction of the physical
   * rotation of the device.  For example, if the device is rotated 90
   * degrees counter-clockwise, to compensate rendering will be rotated by
   * 90 degrees clockwise and thus the returned value here will be
   * [ROTATION_90].
   */
  val rotation: Long? = null,
  /**
   * Gets the name of the display.
   * <p>
   * Note that some displays may be renamed by the user.
   * </p>
   *
   * @return The display's name.
   */
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PluginDisplay {
      val displayId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val flag = list[1].let { if (it is Int) it.toLong() else it as Long? }
      val rotation = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val name = list[3] as String
      return PluginDisplay(displayId, flag, rotation, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      displayId,
      flag,
      rotation,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GetDisplaysRequest (
  val category: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GetDisplaysRequest {
      val category = list[0] as String?
      return GetDisplaysRequest(category)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      category,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SetDisplayRequest (
  val displayId: Long,
  val flag: Long? = null,
  val rotation: Long? = null,
  val tag: String,
  val entryPointFunctionName: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SetDisplayRequest {
      val displayId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val flag = list[1].let { if (it is Int) it.toLong() else it as Long? }
      val rotation = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val tag = list[3] as String
      val entryPointFunctionName = list[4] as String
      return SetDisplayRequest(displayId, flag, rotation, tag, entryPointFunctionName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      displayId,
      flag,
      rotation,
      tag,
      entryPointFunctionName,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CreateVirtualDisplayRequest (
  val tag: String,
  val width: Long,
  val height: Long,
  val dpi: Long,
  val entryPointFunctionName: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CreateVirtualDisplayRequest {
      val tag = list[0] as String
      val width = list[1].let { if (it is Int) it.toLong() else it as Long }
      val height = list[2].let { if (it is Int) it.toLong() else it as Long }
      val dpi = list[3].let { if (it is Int) it.toLong() else it as Long }
      val entryPointFunctionName = list[4] as String
      return CreateVirtualDisplayRequest(tag, width, height, dpi, entryPointFunctionName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      tag,
      width,
      height,
      dpi,
      entryPointFunctionName,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object DisplaysPluginApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CreateVirtualDisplayRequest.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GetDisplaysRequest.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PluginDisplay.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SetDisplayRequest.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CreateVirtualDisplayRequest -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is GetDisplaysRequest -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PluginDisplay -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is SetDisplayRequest -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DisplaysPluginApi {
  fun getDisplays(request: GetDisplaysRequest, callback: (Result<List<PluginDisplay>>) -> Unit)
  fun startDisplay(request: SetDisplayRequest, callback: (Result<Boolean>) -> Unit)
  fun removeDisplay(tag: String, callback: (Result<Boolean>) -> Unit)
  fun createVirtualDisplay(request: CreateVirtualDisplayRequest, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by DisplaysPluginApi. */
    val codec: MessageCodec<Any?> by lazy {
      DisplaysPluginApiCodec
    }
    /** Sets up an instance of `DisplaysPluginApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: DisplaysPluginApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.displays.DisplaysPluginApi.getDisplays", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as GetDisplaysRequest
            api.getDisplays(requestArg) { result: Result<List<PluginDisplay>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.displays.DisplaysPluginApi.startDisplay", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SetDisplayRequest
            api.startDisplay(requestArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.displays.DisplaysPluginApi.removeDisplay", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tagArg = args[0] as String
            api.removeDisplay(tagArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.displays.DisplaysPluginApi.createVirtualDisplay", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as CreateVirtualDisplayRequest
            api.createVirtualDisplay(requestArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class DisplaysPluginReceiverApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by DisplaysPluginReceiverApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun newInfo(messageArg: String, callback: (Result<Unit>) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.displays.DisplaysPluginReceiverApi.newInfo", codec)
    channel.send(listOf(messageArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)));
        } else {
          callback(Result.success(Unit));
        }
      } else {
        callback(Result.failure(FlutterError("channel-error",  "Unable to establish connection on channel.", "")));
      } 
    }
  }
}
